// <auto-generated />
using System;
using System.Collections.Generic;
using AkinatorApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AkinatorApi.Migrations
{
    [DbContext(typeof(AkinatorDbContext))]
    [Migration("20250525160128_AddMatchCountLogs")]
    partial class AddMatchCountLogs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("added_by_user_id");

                    b.Property<int?>("GameSessionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("UserId");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("MatchCountLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswersJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answers_json");

                    b.Property<int>("MatchesCount")
                        .HasColumnType("integer")
                        .HasColumnName("matches_count");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("match_count_logs", (string)null);
                });

            modelBuilder.Entity("QuestionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("added_by_user_id");

                    b.PrimitiveCollection<List<string>>("Options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("SessionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("added_by_user_id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_session_answers");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("GameSessionId");

                    b.ToTable("session_answers", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Character", b =>
                {
                    b.HasOne("User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characters_users");

                    b.HasOne("GameSession", null)
                        .WithMany("GuessedCharacters")
                        .HasForeignKey("GameSessionId");

                    b.HasOne("User", null)
                        .WithMany("AddedCharacters")
                        .HasForeignKey("UserId");

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("GameSession", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("GameSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MatchCountLog", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuestionInfo", b =>
                {
                    b.HasOne("User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddedByUser");
                });

            modelBuilder.Entity("SessionAnswer", b =>
                {
                    b.HasOne("User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameSession", "GameSession")
                        .WithMany("SessionAnswers")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_answers_sessions");

                    b.Navigation("AddedByUser");

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("GameSession", b =>
                {
                    b.Navigation("GuessedCharacters");

                    b.Navigation("SessionAnswers");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("AddedCharacters");

                    b.Navigation("GameSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
